<?php

namespace App\Http\Controllers\Api;

use App\Http\Controllers\Controller;
use App\Http\Requests\{$_singular_pascal}\Destroy{$_singular_pascal};
use App\Http\Requests\{$_singular_pascal}\Index{$_plural_pascal};
use App\Http\Requests\{$_singular_pascal}\Store{$_singular_pascal};
use App\Http\Requests\{$_singular_pascal}\Show{$_singular_pascal};
use App\Http\Requests\{$_singular_pascal}\Update{$_singular_pascal};
use App\Models\{$_singular_pascal};
use App\Transformers\{$_singular_pascal}Transformer;
use Firevel\ApiResourceGenerator\Traits\RespondsWithJson;

/**
 * @group {$_singular_pascal} management
 */
class {$_plural_pascal}Controller extends Controller
{
    use RespondsWithJson;

    /**
     * @var {$_singular_pascal}Transformer
     */
    protected $transformer;

    /**
     * @param {$_singular_pascal}Transformer $transformer
     */
    public function __construct({$_singular_pascal}Transformer $transformer)
    {
        $this->transformer = $transformer;

        $this->authorizeResource({$_singular_pascal}::class, '{$_singular_camel}');
    }

    /**
     * Display a list of {$_plural}.
     *
     * @transformerCollection  \App\Transformers\{$_singular_pascal}Transformer
     *
     * @param Index{$_plural_pascal} $request
     * @return Response
     */
    public function index(Index{$_plural_pascal} $request)
    {
        ${$_plural_lcfirst} = {$_singular_pascal}::filter($request->filter)
            ->visibleBy($request->user())
            ->with($request->getIncludes())
            ->sort($request->getSort())
            ->paginate(
                $request->getPageSize()
            );

        return fractal(${$_plural_lcfirst}, $this->transformer)
            ->parseIncludes($request->get('include'))
            ->respond();
    }

    /**
     * Create a new {$_singular}.
     *
     * @transformer  \App\Transformers\{$_singular_pascal}Transformer
     *
     * @param Store{$_singular_pascal} $request
     * @return Response
     */
    public function store(Store{$_singular_pascal} $request)
    {
        ${$_singular_lcfirst} = {$_singular_pascal}::make($request->validated());
        ${$_singular_lcfirst}->save();

        return fractal(${$_singular_lcfirst}, $this->transformer)
            ->parseIncludes($request->get('include'))
            ->respond();
    }

    /**
     * Display the specified {$_singular}.
     *
     * @transformer  \App\Transformers\{$_singular_pascal}Transformer
     *
     * @param Show{$_singular_pascal} $request
     * @param {$_singular_pascal} ${$_singular_lcfirst}
     * @return Response
     */
    public function show(Show{$_singular_pascal} $request, {$_singular_pascal} ${$_singular_lcfirst})
    {
        return fractal(${$_singular_lcfirst}, $this->transformer)
            ->parseIncludes($request->get('include'))
            ->respond();
    }

    /**
     * Update the specified {$_singular}.
     *
     * @urlParam id required The ID of the {$_singular}.
     *
     * @transformer  \App\Transformers\{$_singular_pascal}Transformer
     *
     * @param Update{$_singular_pascal} $request
     * @param {$_singular_pascal} ${$_singular_lcfirst}
     * @return Response
     */
    public function update(Update{$_singular_pascal} $request, {$_singular_pascal} ${$_singular_lcfirst})
    {
        ${$_singular_lcfirst}->fill($request->validated())
            ->save();

        return fractal(${$_singular_lcfirst}, $this->transformer)
            ->parseIncludes($request->get('include'))
            ->respond();
    }

    /**
     * Remove the specified {$_singular}.
     *
     * @urlParam id required The ID of the {$_singular}.
     *
     * @param Destroy{$_singular_pascal} $request
     * @param {$_singular_pascal} ${$_singular_lcfirst}
     * @return Response
     */
    public function destroy(Destroy{$_singular_pascal} $request, {$_singular_pascal} ${$_singular_lcfirst})
    {
        if (${$_singular_lcfirst}->delete()) {
            return $this->respondSuccess();
        }
    }
}
